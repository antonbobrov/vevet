"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[43],{6636:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>b,frontMatter:()=>s,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"base/Callbacks/index","title":"Callbacks","description":"Callbacks class manages event listeners with support for one-time execution, protection, and delays.","source":"@site/docs/base/Callbacks/index.md","sourceDirName":"base/Callbacks","slug":"/base/Callbacks/","permalink":"/docs/base/Callbacks/","draft":false,"unlisted":false,"editUrl":"https://github.com/antonbobrov/vevet/tree/master/docusaurus/docs/base/Callbacks/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"CSS Variables","permalink":"/docs/vevet/css-vars"},"next":{"title":"Module","permalink":"/docs/base/Module/"}}');var l=a(4848),c=a(8453);const s={},o="Callbacks",r={},i=[{value:"Learn more in the <a>Typedoc</a>",id:"learn-more-in-the-typedoc",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,c.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"callbacks",children:"Callbacks"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Callbacks"})," class manages event listeners with support for one-time execution, protection, and delays."]}),"\n",(0,l.jsxs)(n.p,{children:["It's used internally in the ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.a,{href:"/docs/base/Module/",children:"Module"})})," and all components, but you can also instantiate it independently:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"// Define the interface for callback events\ninterface ICallbacks {\n  init: undefined;\n  update: {\n    value: number;\n  };\n}\n\n// Create a Callbacks instance\nconst callbacks = new Callbacks<ICallbacks>();\n\n// Register a basic callback for \"init\"\nconst removeSimpleCallback = callbacks.on('init', () => {\n  console.log('callback on init');\n});\n\n// Register a protected callback (cannot be removed manually)\nconst protectedCallback = callbacks.on('init', () => {\n  console.log('protected callback');\n}, { protected: true });\n\n// Register a one-time callback\nconst removeOnceCallback = callbacks.on('init', () => {\n  console.log('one-time callback');\n}, { once: true });\n\n// Register a delayed callback (executes after 1000ms)\nconst removeDelayedCallback = callbacks.on('init', () => {\n  console.log('delayed callback');\n}, { timeout: 1000 });\n\n// Emit the \"init\" callbacks\ncallbacks.emit('init', undefined);\n\n// Register a callback with an argument and emit it\nconst onUpdate = callbacks.on('update', ({ value }) => {\n  console.log('update', value);\n});\ncallbacks.emit('update', { value: 0 });\n\n// Remove a specific callback\nremoveSimpleCallback();\n\n// Attempting to remove a protected callback (no effect)\nprotectedCallback();\n\n// List all registered callbacks\nconsole.log(callbacks.list);\n\n// Remove all callbacks\ncallbacks.destroy();\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"learn-more-in-the-typedoc",children:["Learn more in the ",(0,l.jsx)("a",{href:"/vevet/v5/classes/Callbacks.html",target:"_blank",rel:"noopener",children:"Typedoc"})]})]})}function b(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var t=a(6540);const l={},c=t.createContext(l);function s(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);